Hey guys, this is Super Testnet and today I just wanted to go over my latest invention which is called the <u>Examiner</u>, also called Snooper Testnet. This is a tool for examining the <u>Monero</u> blockchain in order to try and trace transactions back to their origin and to their destination. So let me just show you how it works. I'm just going to pick a random block here from the, you know, from a recent number of blocks and it gives me a nice little transaction list. So let's pick a random transaction from in here. I'll do this one. And so for each transaction here, it gives you some information. It tells you the transaction's identifier. It tells you all of the possible senders of this transaction. It tells you, including in every input that it has. It tells you the people who received money in this transaction. It gives you information you can gather about the fee or about the amount, including what the fee is, a rough approximation of a lower bound of what might be in the outputs, and therefore of what might be in the inputs, because of course the inputs have to be greater than whatever is in the outputs. It gives you some timing info about this. And you know, the interesting thing here is what you can do with all of this information. So, like, up here, you see these, you know, this list of possible senders. Well, like, you just get that for free in <u>Monero</u> because every transaction just broadcasts a list of every possible person who might have sent it and a proof that you know the real sender is one of this group. But let's examine, like, maybe, maybe we know something about number five. For example, maybe, maybe this happens to be us. This is our <u>public key</u>. We can tell that because you know we have our view key and we're like, oh, this is me. So I'm going to label this. This is actually me. And because it's me, I can eliminate this. And I know that I didn't send this transaction. This <u>possible sender</u> is not the real sender because it's me instead. So you can just kind of do that. You can eliminate that <u>possible sender</u>. Then maybe you're an investigator and maybe you've got some information about, I don't know, say, you know, you happen to know that this key here is an output from a darknet market that you just arrested. You just got them, you did a raid, you got all their <u>Monero</u>, you got their <u>Monero</u> address, and so you can see all of the outputs that they've created and you see, oh, this output here, this belongs to that darknet market that we arrested, and we know that they didn't make this transaction. So, once again, you can eliminate them as a decoy. And basically, you're doing some sleuthing around here. You're checking all of the inputs, and you're just eliminating decoys. There's actually some of this that's actually automated, and I can show you that. So, let me go over here. If I do demo equals true, I'm going to show you some automatic, what's it called? Decoy eliminations that I do. So, in this example, exploring <u>Monero</u>, this my document here, I'm going to show you something called recency bias. And the transaction I'm about to do does not actually exhibit recency bias. That's why I'm doing a demo mode. I changed what we count as recent. But you can see that here I've automatically marked everything except the first <u>possible sender</u> as a decoy. So, if I take a look at them, I can just see, you know, these are all decoys. Now, why do I do that? Well, it's because one of the tricks that <u>Monero</u> uses to pick who's going to be a decoy in your transaction is it tries to pick from recent blocks. So, this block was mined here in block 3,207,363, and it tries to pick recent people in there as the dominant people you're picking to be part of your possible sender group. So you can see this guy was pretty close to the most recent block. This guy down here, also pretty close to the most recent block. Well, take a look at <u>possible sender</u> number one here. He's way far back in the blockchain, way back in 2 million. He's a million ago away. And every other one is more recent than that. The second most recent, I sort them according to most recent. The second most recent is this one, which is 200,000 blocks away. But <u>possible sender</u> number one here is from over a million blocks away. And so that alerts you that this guy sticks out like a sore thumb. His wallet's trying to pick from recent, it's using recency bias to try and pick from recent transactions. But if it's trying to stick an input there from him and it's not recent, well, that sticks out. So now, this transaction actually does not exhibit <u>recency bias</u>. I only actually count recency bias if um there's only one transaction that's old and all of the others are within 10,000 of the block. And this one in demo mode I'm doing 200,000. But you can see how this is you know this is interesting. Another thing you can do is in multi-input transactions I've got an automatic eliminator for um for those and once again this is a demo and I've modified the numbers to make things show up that aren't really true uh in this demo mode where I have where you have demo equals true. So in this multi-output transaction or multi-input transaction where I'm sending multiple coins to someone, I've eliminated everyone as a decoy except <u>possible sender</u> number 10 and <u>possible sender</u> number 11 in input 2. Those are the true, according to my demo code, those are the true senders here. And if you look at why, it's because it's once again a timing analysis thing. This guy merged an input from this block right here, 3207302, and in input 2, he merged a coin, he used an input from this block, 3207299. Now, in <u>Monero</u>, they use something called a delayed, what's it called, decaying gamma function in order to pick inputs. And it's very rare, if the <u>UTXOs</u> you're merging are old, it's very rare that you'll pick two that are within five blocks of each other. Like, that just, it doesn't happen once you get past the more recent blocks where it's biased towards, that you pick two that are very close to one another. The only reason that would happen is because you received money, not the only reason, almost the only reason, is because you received money. Like, people were sending you money, maybe it was a donation campaign or something, and you merged two transactions where you happened to receive money very close to one another, and so your wallet had to include in two different inputs, you know, spends that were close to one another. So that's why that would happen. Now, because I'm doing demo mode, I eliminated the excluding things that are recent, because it happens often when the coins are recently created. And that's why this is showing up as it figured out the true spend, even though we're only in demo mode. If I eliminate demo mode, then it won't show up in this example. So if I add transaction, I don't know who the <u>possible sender</u> is because it's too recent for me to apply that metric, apply that heuristic. But the point is, you can use this tool to start eliminating possible senders from a <u>Monero</u> transaction, and it'll save that for you and let you build up a record, kind of build up a tree of statistical analysis of who the <u>possible sender</u> is in this thing. And over here, if you check out the recipients, the recipients are <u>not</u> just listed in plain text on <u>Monero</u>. So you can label those. You can also see other transactions that they appear in, although in this case, he only appears in this transaction. This is an annoying thing. The API that I'm using, I'm using <u>Blockchair's API</u> to get information about the <u>Monero</u> blockchain, it doesn't do what Bitcoin's blockchain does, where if you examine an output on Bitcoin, you can click it and the block explorer will show you all transactions that that appears in. <u>Blockchair</u> does not, so in order to create this, I'm like saving a record of every transaction I've seen it in, and then you know, that's how that works. So, like, if I do, I don't know, this guy, a <u>possible sender</u> five, and I go back here, well, this is a bad example, because there's too many recipients for me to find it. But if I click each of these recipients, I will see one of them, one of these recipients, appears in two transactions because he was in the one that I was just looking at and he's in this one. Anyway, this transaction tool lets you start tracing things in <u>Monero</u> because they put all this information on the blockchain and let us do that. There's a whole bunch of other heuristics that I intend to build out over the coming weeks such as, for example, here is possibly an exchange who's maybe consolidating inputs or sending to multiple people. Regular people don't tend to send in one transaction to a large group. So this indicates it's a bot, so you can record that information and then say, you know, if these things appear in other transactions later, you can be like, oh, well, this one's not the change address for the bot, because if it was, then it would appear in one with multiple outputs again. Like, there's lots of heuristics you can do to trace information on <u>Monero</u>. So, yeah, I hope you like this tool. It's a gift to the world, free and open source. Oh, the reason I made it is because recently I've been investigating <u>Monero</u> and its traceability, and I found this. I found <u>CipherTrace</u>, who created, who's a blockchain analysis company, they created this visual tool, which I've taken a picture of here, or a screenshot, but they created a screenshot and then posted it on Reddit about how their tool for tracing <u>Monero</u> works. And like you can see, these are all inputs to a transaction, the people who picked as decoys. And these little things are transactions over here. I think this one's a transaction. And the little lines indicate who they've eliminated. So they've narrowed it down in this case to the true spend is one of these top four people. And here is one of these top two people. So this little visualizer is really cool. And I thought, I want to make something like that that's free and open source. Because, of course, they don't reveal the source code, and then <u>we can't help contribute and improve it</u>. So, mine's free and open source. I'll be releasing it on my GitHub as soon as I finish this video. And anyway, I hope you enjoy it. I'll have links under here for if you want to learn more about how <u>CipherTrace</u> is doing it. Link to my GitHub if you want to contribute to my <u>Monero</u> Tracing tool. But yeah, free and open source, <u>Monero</u> tracing tools, visualizers, stuff like that. It's good stuff. So, hope you like it. Thank you for watching.