Hi, I'm Elias. I'm Ortino on Twitter or online anywhere. I'm an engineer with Spiral working on the Lightning Dev Kit. And this talk will be a bit more technical than the talks I heard in this stage before today. Although I think there are a lot of connections that can be drawn from the other talks through this. Yeah, as the title states, this is on Bolt 12. wanted and how to integrate it. I'll take a note. All right. Where are we today? So today we have Bolt 11 invoices. Everybody is familiar with them. They're ubiquitous, used everywhere you use Lightning today. And they're the original payment protocol, essentially, invoices. They're great. They are tried and true. And they worked so far pretty well in the most part. Everybody is kind of aware of the flaws that old 11 invoices have. In particular, they have this interactivity requirement, basically. So if you want to pay a friend, you always have to ask them first, hey, can you send me an invoice, because they're not reusable. And this is kind of annoying to always ask somebody, hey, please send me an invoice. I want to send you some money. And even more so, of course, they're kind of large. If you can see this here, it's probably hard to read. But the data that goes into the Vault 11 invoice, the encoding is rather large, which is fine if you just send it as a text message or whatever. But if you want to encode them in a QR code, which is the usual way we do Lightning transactions these days, it's kind of annoying that they are so large because you might want to add additional data into that same QR code. you put into your QR code, I'm not sure if you're aware of that, the harder it gets to scan. It gets more dense and that means that all the smartphones, for example, have an issue scanning them if the camera isn't that great. But even worse than these issues, basically, which are mainly UX issues, Bolt 11 has poor privacy, generally, because it leaks the payee pub key. You always, if you send an invoice to somebody, you say hey this is my node you leak your identity basically so we don't have what's called recipient anonymity in bolt 11 world of course there are some ways to mitigate some of it somehow you can always run on tour or whatever but in general this is not the greatest thing to have we want to have recipient anonymity allen url lightning addresses mitigate some of the ux issues just discussed so retrieve individual invoices from a web server. So instead of asking your friend every time, hey, can you give me new invoice, you ask a web server, hey, can I get a new invoice? And this improves the UX. The issue with that is it requires running a web server, which is kind of annoying because that is another tech stack you have to work with. It introduces additional complexity. And on top of that, there are additional privacy and security risks that just come with running or with that increased attack surface, essentially, of running a web server. So it improved things considerably, but it's still not quite there, what we really want. Of course, that's where Bolt 12 comes in, Bolt 12 to the rescue. Granted, it has been a long time coming so it's a really slow job to the rescue essentially i think i just looked it up these days um in just a few days i think august 31st will be like four years anniversary that rusty opened the spec pr for the offers for bolt 12 on the lightning spec repo so it has been some time that protocol devs have been working on this and discussing this and so on it's here. It's actually working and it fixes basically all the aforementioned drawbacks of Fold11. We have reusable smaller offers. They keep on static. You can generate them. You can put them on a website or whatever. They don't change. And then people can send you money. Even more so, it guarantees receiver or recipient anonymity. You don't leak your pub key anymore. and you have no additional dependencies to your tech stack with all the drawbacks we just discussed because it's now an actual base protocol of the Lightning or base pack of the Lightning protocol and it's already implemented in your Lightning node, hopefully. So to focus on the privacy aspect real quick, and here it gets a bit technical, but I don't want to get into too much detail. 12 ensure the private part how do we get around leaking the pub key well all 12 uses something that's called blinded paths so this whole thing is a depiction of a blinded path and you can see here is this opaque thing that is you cannot look into it basically this whole box so instead of the recipient node actually putting its pub key in there the only thing that the sender sees is the introduction point and everything in here is encrypted actually multiple times while on your encryption meaning that the only thing that's leaked is a introduction node that is chosen by the recipient itself and so now when that is included in the offer here and that is the offer that is just sent via QR code where like out of bounds like we do currently with bold 11 invoices to Alice the sender and you see It's a blind path in there. So what Alice now does if she wants to pay this offer is to send an invoice request using that blinded path to Bob via the introduction node, of course, not to Bob directly. And then Bob responds with a Bolt 12 invoice. Yes, on the protocol level there is something like a Bolt 12 invoice, but you likely will never see it using it because it's really a protocol detail. It's really a message on the protocol level. you should really deal with its offers and What we call refunds basically invoice requests if you want to refund somebody Anyways, there is spoke 12 invoices that will be sent back where a similar reply path construction basically, so Bob also doesn't still doesn't know who Alice is and Then Finally we can send the actual payment. So you see it's a kind of involved protocol lots of cryptography going on and all of this is communicated over onion messages on the protocol level and these onion messages are then routed here is another depiction basically here you have your road in the network and this would be your introduction point and here's ball so hopefully this will be routed in the network where onion messages slight caveat here currently as not everybody currently in the network is Support the supporting bolt wealth or rather onion message forwarding More often than not we currently when we use bolt wealth We connect to the introduction point directly and send the on mass from there But in the future and I'll be coming back to that we have hopefully see full routed on your messages So how does adoption look like bolt 11 I said is ubiquitous and Where are we with Bolt 12 currently? Well, Phoenix deployed it. You can use it today in the wallet. It works. LDK, we support it in LDK, LDK node. It's ready to go. CRN, although while they, I think, currently catching up to the latest spec, but it's really just pending a release. They support it, of course. And LND is committed to add support in the near future. And meantime, you can run a project LNDK, which is basically a need-lead project, a separate daemon on top of L&D that provides on-air message forwarding and also Bolt 12 sent to you if you run an L&D node. So I can just encourage you to do that. Cool. So apart from that, why do you start actually adopting it? It sounds a bit complicated to get started, especially if you're not super technical or if you're not too familiar familiar with the Lightning protocol details. So where do we start? The answer is a thing we call LDK node. LDK node is a Lightning node library based on LDK and BDK. So it comes with an associated on-chain wallet ready out of the box. And the focus of LDK node is really to provide a simplified experience to write self-custodial Lightning nodes. So So it provides a Library so you can write self custodial lightning odds and we think self custom self custody self custody is important I Agree with the talk before that it's hard currently in many aspects. Self-custodial lightning can be hard. But we are, on the other hand, working hard towards making it simpler for users. And Aldi Canode hopefully helps you to do that. So you can just include it and integrate it in your app. And basically, we take care of all these protocol details for you. It has a modular architecture. So it comes with customizable chain data, gossip data, entropy, and liquidity source back-end. So we integrate with the LSB. spec for example to also solve stuff like onboarding of initial users we integrate LSPS2 which the JIT channel spec is called so where you would for example to be able to create an invoice and then when the invoice is paid the LSP you connect to automatically opens a channel to you hopefully even a zero-conf channel which makes onboarding really seamless so if you're aware of the Phoenix onboarding experience where you don't have to care if you have an initial channel open or not. Basically, you get the same thing with this just in time spec. And then we provide language bindings to you so that while it is written in Rust, LDK node, you can write your programs in Kotlin, Swift, Python, Flutter, React Native, Go, C Sharp, in all these languages and they should have the same simplified API ready to go so you can integrate self-custody lightning or for example in your mobile application so I want to run to through a real quick example just to showcase that it's really straightforward to use it although I'm not expecting I'm not entirely sure how the crowd here is how technical people are so I try to keep this short just to get set up with a node is essentially you would create a builder object. And on this builder, you can configure all kinds of things. That is basically the modular architecture I just described. You can plug in your own explorer or backend or whatever configure. I want to run this on testnet or mainnet or whatever, regtest. And then you call just builder.build and you get a node object. And this is your lightning node. You're basically done. You just set up. Lightning node and you call start on it and then it starts up and it has its things With the Explorer server it updates fees and so on so basically in these five lines of code you already set up a lightning node and Yeah That that is more or less ready to go you can then get a funding address for example To to fund the node and then open a channel which we see in the next step or as I just mentioned you can put you get a just-in-time invoice that is then payable. And if you connect to an LSP, you would also configure that on the builder. The LSP would open a channel to you. Similar, as I just mentioned, you would also just, it's essentially one method call to open a channel to another node. You just say, okay, I want to connect to this pub key at this address, and then you would open a channel and you get an event back when the channel is opened. And coming back to Bolt12, this is basically the same goes for integrating Bolt12. So we really tried to streamline the API here to make it really easy to integrate Bolt12 payments. Once you have an open channel, you have liquidity, either via the LSP or you did manually open a channel, you can just call node bolt12payment.send an offer and there goes your 12 payment and that in the background does take care of all that complexity I mentioned in the beginning similarly of course you can also receive to bowl 12 by just creating an offer and then giving that out and that would be your static offer that people can send payments too many times and we also as I mentioned before support refunds for example that is essentially you can think of them as invoice requests without an offer that kind of switches around the flow I showed before. Don't want to get into details too much here. So just to wrap this up, essentially, this example, this is a fully functional Rust program setting up a Lightning node, starting the Lightning node, getting a funding address where you then can fund, opening a channel, and sending a bullet 12 payments. So in this, what is it, maybe if you cut out the white space it's actually 15 lines of code or something you integrated all 12 payments. Cool. So it's not that complicated to get started. And the future that was the future for the last four years is now here. Now that the future is here, what's next? For one, human readable names will be upcoming, which is the current BIP proposal by Matt Carello and T-Bust also. And there's the idea we can include these static offers now into the DNS domain name system as static entries. And we get something that is very similar to an email address format where you don't have to remember or you don't have to scan the QR code. You have actually a human readable name for somebody. So in many use cases, scanning a QR code makes more sense. But if you just want to ask a friend, hey, we just had dinner or whatever. I want to pay you back. What's your human readable name? That is much easier than sending around QR codes or offer encodings. That will be great. Then people are also working on, actually a colleague of mine on the async payment proposal, which will finally enable async receive. That has to do with an even more complicated protocol based on onion messages, a lot more messages to be exchanged and a lot more tricky details where which onion message will be held at which LSP side basically to enable async payments. But that is coming and is actively worked on. And finally, coming back to the note of forwarding routed pole12 payments these will be coming in the future as currently around 6% of the forwarding nodes in the network have onion message forwarding enabled CLN currently it's an experimental feature you have to enable it so I encourage you if you run a CLN node please enable onion message forwarding and if you run L&D as Mentioned before please run L and DK you get all 12 send for free and you also help the network to get this number higher so we can have eventually routed both 12 payments for the full network I Mentioned as I said direct connecting the introduction point is fine for now, but eventually we want to reach Fully routed payments in the network Cool so far for that integration talk Thanks so much for the attention if you want to Want to get further resources, please visit lighting that kid on board. We have also very active discord community where we answer all your Where we try to get great a gift great user support. So ask anything there also you can reach me via underscore Tino on X I guess and or alias at spiral at dot XYZ or just ask now Thank you. Hey. For the Bolt 12 refund, I'm assuming where the refund is being pushed from is the guy who's going to send the fees, right? Like, where do the fees come from? If it's going to be rerouted backwards, I'm guessing that they're not going to just give away the fees, right? No, for the refund, it's actually... I mean, Refund is a bit, at the same time, the right notion, but it's also confusing because it's not actually rewarding the actual payment, right? It's a new payment. We just call it refund because it inverts the direction. So in the offer case, you basically scan an offer, you send an invoice request, basically say, hey, I want to give you money. Please send me an invoice. And with refund, you basically do it the other way around. if we keep it in the refund use case, would send back directly an invoice request saying, hey, here's an invoice request. If you send me an invoice, I can give you money, basically. That just leaves out the first offer request, basically, or the invoice request. Could you give a bit more details on the BIP353 with the human readable name and the integration How will it technically work with the integration on DNS? Well, it's just a TXT record, basically, where you add that to your domain you control. You would secure that via DNSSEC, so that nobody, or that is basically assigned. And then there are basically two different options how you could go you could either do wildcard thing that might be make more sense for because custodian that has thousands and thousands of user where you can say basically yeah you would basically pay to one to one specific offer and then give additional data to let your custodian know okay this is for this user that is one then you would have just one entry or you can have individual entries per user and have individual offers essentially per user. So every user would have an individual entry. And the format of those entries, would they look like an email address or is it like alias.spiral.xyz? Is it free? I think the free text. I think the Bitcoin design community discussed that a lot. How should we basically format these human readable names? Because on a technical level you can do of course everything. And as far as I'm aware, the last point of discussion ended up being that it should look like an email address, so you can easily copy and paste it, but it is prefixed with a Bitcoin sign. Or you can either write the Bitcoin sign, or it should always in the UI be prefixed with a Bitcoin sign, so it is clearly distinguishable from an email address. Because if you use the email address format, like Lightning address, then have conflicts with actual email addresses. And that is kind of annoying in some parts. Maybe in setups where you already have email addresses and you want to run Lightning addresses on top, but they might not always match or something like that. So yeah, to get around this, the idea is to have the address clearly distinguishable to show, OK, this is not actual email address . If you go to 12.cache, I don't know if you can show it here quickly, but some of the designers have been experimenting with what that actually looks like in practice, and you can generate your own bit 3.5.3 compliant name. So yeah, check out 12.cache. I wanted to ask how reliable is the Bolt 12 compared to Bolt 11? I can imagine if some nodes in the past gets offline there are liquidity problems, then the invoice stops working, or how does it work? So from the payment reliability, it's the same. It's just a bit more messaging complexity. So the payment step is exactly the same as with Bolt 11. It's really just before, you would just immediately send the payment after adding the invoice, and now you have basically this one and half round trips or so in the beginning to negotiate until you get the invoice, essentially. So it's just a bit more complexity on negotiating. And there, things can currently fail, but you can essentially just retry. Yeah. Okay, thank you. But the point, maybe just to add to that, the thing, like, the good thing is that what makes Lightning payments sometimes fail is that mostly there's not enough liquidity on the end and onion messages don't have this limit so or are not encumbered by any kind of liquidity so they're not expected to be unreliable in the same sense as payments are so not we're not getting a lot more unreliable with that so if there's a basically if you have a TCP connection with a node you should be able to send and if you don't have one you you you can't send a payment over that link anyways. Okay, thanks. The async payments in the future, what does that refer to? Because it's already async, meaning you make the offer today, you get paid tomorrow. Yeah, the async payment part is really that currently both parties have to be online at the same point in time to be actually to send and receive the payment. edge tlc and then have to claim it back and you have to not like for every part you have to keep online to actually be able to claim it again and async payments is essentially a model without getting too much details here um where likely both sides would have an lsp and you could think so if you want to do it really trivially you would like or a real simple way to to do that would be to have hodl payments essentially and you would just wait until the receiver comes back online but that's horrible for network liquidity to just block out liquidity so the idea with async payments is both sides have would have an lsp and you would hold the liquidity only on the like on the center side basically so the liquidity is only locked between the sending node and their lsp and then you would have an onion message protocol that would negotiate and basically notify the lsps hey the receiver now came online please forward this payment now you're unable to receive it and actually the other way around also so um yeah it's a bit more tricky to get everything right uh but i think we we we're making good progress there thank you and and just to clarify this would really solve the major lightning drawback of being having to be online to receive payments so finally and solve that. Cool. Great. Then thank you again.
